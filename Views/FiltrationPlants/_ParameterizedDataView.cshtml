@using System.Data;
@using System.Data.SqlClient;
@using Newtonsoft.Json;
@model IEnumerable<FiltrationPlantTableData>

<style>
    .chartdiv {
        height: 500px;
    }

    #eee;
    float: left;
    }

    #legend1 {
        width: 330px;
        height: 450px;
        border: 1px solid #eee;
        margin-left: 10px;
        float: left;
        text-align: left;
    }

        #legend1 .legend1-item {
            margin: 10px;
            font-size: 14px;
            font-weight: bold;
            cursor: pointer;
            width: 330px !important;
            text-align: left;
        }

            #legend1 .legend1-item .legend1-value {
                font-size: 11px;
                font-weight: normal;
                margin-left: 10px;
            }

            #legend1 .legend1-item .legend1-marker {
                display: inline-block;
                width: 12px;
                height: 12px;
                border: 1px solid #ccc;
                margin-right: 10px;
            }

            #legend1 .legend1-item.disabled .legend1-marker {
                opacity: 0.5;
                background: #ddd;
            }



    #legend2 {
        width: 250px;
        height: 450px;
        border: none;
        margin-left: 10px;
        text-align: center;
    }

        #legend2 .legend2-item {
            margin: 10px;
            font-size: 15px;
            font-weight: bold;
            cursor: pointer;
        }

            #legend2 .legend2-item .legend2-value {
                font-size: 12px;
                font-weight: normal;
                margin-left: 22px;
            }

            #legend2 .legend2-item .legend2-marker {
                display: inline-block;
                width: 12px;
                height: 12px;
                border: 1px solid #ccc;
                margin-right: 10px;
            }

            #legend2 .legend2-item.disabled .legend2-marker {
                opacity: 0.5;
                background: #ddd;
            }


    #legend3 {
        width: 250px;
        height: 450px;
        border: none;
        margin-left: 10px;
        text-align: center;
    }

        #legend3 .legend3-item {
            margin: 10px;
            font-size: 15px;
            font-weight: bold;
            cursor: pointer;
        }

            #legend3 .legend3-item .legend3-value {
                font-size: 12px;
                font-weight: normal;
                margin-left: 22px;
            }

            #legend3 .legend3-item .legend3-marker {
                display: inline-block;
                width: 12px;
                height: 12px;
                border: 1px solid #ccc;
                margin-right: 10px;
            }

            #legend3 .legend3-item.disabled .legend3-marker {
                opacity: 0.5;
                background: #ddd;
            }


    #legend4 {
        width: 260px;
        height: 450px;
        border: none;
        margin-left: 10px;
        text-align: center;
    }

        #legend4 .legend4-item {
            margin: 10px;
            font-size: 15px;
            font-weight: bold;
            cursor: pointer;
        }

            #legend4 .legend4-item .legend4-value {
                font-size: 12px;
                font-weight: normal;
                margin-left: 22px;
            }

            #legend4 .legend4-item .legend4-marker {
                display: inline-block;
                width: 12px;
                height: 12px;
                border: 1px solid #ccc;
                margin-right: 10px;
            }

            #legend4 .legend4-item.disabled .legend4-marker {
                opacity: 0.5;
                background: #ddd;
            }

    #legend5 {
        width: 250px;
        height: 450px;
        border: none;
        margin-left: 10px;
        float: left;
        text-align: left;
    }

        #legend5 .legend5-item {
            margin: 10px;
            font-size: 15px;
            font-weight: bold;
            cursor: pointer;
            width: 330px;
        }

            #legend5 .legend5-item .legend5-value {
                font-size: 12px;
                font-weight: normal;
                margin-left: 22px;
            }

            #legend5 .legend5-item .legend5-marker {
                display: inline-block;
                width: 12px;
                height: 12px;
                border: 1px solid #ccc;
                margin-right: 10px;
            }

            #legend5 .legend5-item.disabled .legend5-marker {
                opacity: 0.5;
                background: #ddd;
            }
    .div#chartContainer2:after {
        content: "";
        position: absolute;
        bottom: 190px;
        left: 0px;
        background: transparent;
        width: 61px;
        height: 0px !important;
    }
</style>



<script src="https://cdn.amcharts.com/lib/4/core.js"></script>
<script src="https://cdn.amcharts.com/lib/4/charts.js"></script>
<script src="https://cdn.amcharts.com/lib/4/themes/animated.js"></script>




<script>
    am4core.ready(function () {

        // Themes begin
        am4core.useTheme(am4themes_animated);
        // Themes end

        // Create chart instance
        var chart1 = am4core.create("chartdiv1", am4charts.PieChart);
        var chart2 = am4core.create("chartdiv2", am4charts.PieChart);
        var chart3 = am4core.create("chartdiv3", am4charts.PieChart);
        var chart4 = am4core.create("chartdiv4", am4charts.PieChart);

        var chart5 = am4core.create("chartdiv5", am4charts.PieChart);
        var chart6 = am4core.create("chartdiv6", am4charts.PieChart);
        var chart7 = am4core.create("chartdiv7", am4charts.PieChart);

        var chart8 = am4core.create("chartdiv8", am4charts.PieChart);
        var chart9 = am4core.create("chartdiv9", am4charts.PieChart);

		chart1.data = [{
		"mode": "Working Hours",
		"Hours": @Model.First().workingInHours
		}, {
		"mode": "Non-Working Hours",
		"Hours": @Model.First().nonWorkingInHours
		}, {
		"mode": "Total Hours",
		"Hours": @Model.First().totalHours
		}];


		var pieSeries1 = chart1.series.push(new am4charts.PieSeries());
		pieSeries1.dataFields.value = "Hours";
		pieSeries1.dataFields.category = "mode";
		//pieSeries1.labels.template.disabled = true;
		pieSeries1.alignLabels = false;
        pieSeries1.labels.template.bent = true;
        pieSeries1.labels.template.radius = 3;
        pieSeries1.labels.template.padding(0, 0, 0, 0);
		//pieSeries2.ticks.template.disabled = true;
		pieSeries1.labels.template.text = "{category}: {value.value}";
        pieSeries1.slices.template.tooltipText = "{category}: {value.value}";
		chart1.innerRadius = am4core.percent(30);

		// Create custom legend
		chart1.events.on("ready", function(event) {
		  // populate our custom legend when chart renders
		  chart1.customLegend = document.getElementById('legend1');
		  pieSeries1.dataItems.each(function(row, i) {
			var color = chart1.colors.getIndex(i);
			var percent = Math.round(row.values.value.percent * 100) / 100;
			var value = row.value;
			legend1.innerHTML += '<div class="legend1-item" id="legend1-item-' + i + '" onclick="toggleSlice(' + i + ');" onmouseover="hoverSlice(' + i + ');" onmouseout="blurSlice(' + i + ');" style="color: ' + color + ';"><div class="legend1-marker" style="background: ' + color + '"></div>' + row.category + ': ' + hoursToTime(value) + ' </div>';
		  });
		});

		function toggleSlice(item) {
		  var slice = pieSeries.dataItems.getIndex(item);
		  if (slice.visible) {
			slice.hide();
		  }
		  else {
			slice.show();
		  }
		}

		function hoverSlice(item) {
		  var slice = pieSeries.slices.getIndex(item);
		  slice.isHover = true;
		}

		function blurSlice(item) {
		  var slice = pieSeries.slices.getIndex(item);
		  slice.isHover = false;
		}
		function hoursToTime(num) {
            //console.log(num);
            num = num * 60;
            var hours = Math.floor(num / 60);
            var minutes = Math.round(num % 60);
            return hours + " Hours, " + minutes + " Minutes";
        }


		chart2.data = [{
            "mode": "Working Hours in Manual",
            "Hours": @Model.First().workingInHoursManual
        }, {
            "mode": "Total Hours",
            "Hours": @Model.First().totalHours
        }];


		var pieSeries2 = chart2.series.push(new am4charts.PieSeries());
		pieSeries2.dataFields.value = "Hours";
		pieSeries2.dataFields.category = "mode";
		//pieSeries1.labels.template.disabled = true;
		pieSeries2.alignLabels = false;
        pieSeries2.labels.template.bent = true;
        pieSeries2.labels.template.radius = 3;
        pieSeries2.labels.template.padding(0, 0, 0, 0);
		//pieSeries2.ticks.template.disabled = true;
		pieSeries2.labels.template.text = "{category}: {value.value}";
        pieSeries2.slices.template.tooltipText = "{category}: {value.value}";
		chart2.innerRadius = am4core.percent(30);

		// Create custom legend
		chart2.events.on("ready", function(event) {
		  // populate our custom legend when chart renders
		  chart2.customLegend = document.getElementById('legend1');
		  pieSeries2.dataItems.each(function(row, i) {
			var color = chart2.colors.getIndex(i);
			var percent = Math.round(row.values.value.percent * 100) / 100;
			var value = row.value;
			legend2.innerHTML += '<div class="legend2-item" id="legend2-item-' + i + '" onclick="toggleSlice(' + i + ');" onmouseover="hoverSlice(' + i + ');" onmouseout="blurSlice(' + i + ');" style="color: ' + color + ';"><div class="legend2-marker" style="background: ' + color + '"></div>' + row.category + '<div class="legend2-value">' + hoursToTime(value) + ' </div></div>';
		  });
		});


		chart3.data = [{
            "mode": "Working Hours in Auto Mode",
            "Hours": @Model.First().workingInHoursRemote
        }, {
            "mode": "Total Hours",
            "Hours": @Model.First().totalHours
        }];


		var pieSeries3 = chart3.series.push(new am4charts.PieSeries());
		pieSeries3.dataFields.value = "Hours";
		pieSeries3.dataFields.category = "mode";
		//pieSeries1.labels.template.disabled = true;
		pieSeries3.alignLabels = false;
        pieSeries3.labels.template.bent = true;
        pieSeries3.labels.template.radius = 3;
        pieSeries3.labels.template.padding(0, 0, 0, 0);
		//pieSeries3.ticks.template.disabled = true;
		pieSeries3.labels.template.text = "{category}: {value.value}";
        pieSeries3.slices.template.tooltipText = "{category}: {value.value}";
		chart3.innerRadius = am4core.percent(30);

		// Create custom legend
		chart3.events.on("ready", function(event) {
		  // populate our custom legend when chart renders
		  chart3.customLegend = document.getElementById('legend1');
		  pieSeries3.dataItems.each(function(row, i) {
			var color = chart3.colors.getIndex(i);
			var percent = Math.round(row.values.value.percent * 100) / 100;
			var value = row.value;
			legend3.innerHTML += '<div class="legend3-item" id="legend3-item-' + i + '" onclick="toggleSlice(' + i + ');" onmouseover="hoverSlice(' + i + ');" onmouseout="blurSlice(' + i + ');" style="color: ' + color + ';"><div class="legend3-marker" style="background: ' + color + '"></div>' + row.category + '<div class="legend3-value">' + hoursToTime(value) + ' </div></div>';
		  });
		});


        chart4.data = [{
            "mode": "Working Hours in Scheduling",
            "Hours": @Model.First().workingInHoursScheduling
        }, {
            "mode": "Total Hours",
            "Hours": @Model.First().totalHours
        }];


		var pieSeries4 = chart4.series.push(new am4charts.PieSeries());
		pieSeries4.dataFields.value = "Hours";
		pieSeries4.dataFields.category = "mode";
		//pieSeries1.labels.template.disabled = true;
		pieSeries4.alignLabels = false;
        pieSeries4.labels.template.bent = true;
        pieSeries4.labels.template.radius = 3;
        pieSeries4.labels.template.padding(0, 0, 0, 0);
		//pieSeries4.ticks.template.disabled = true;
		pieSeries4.labels.template.text = "{category}: {value.value}";
        pieSeries4.slices.template.tooltipText = "{category}: {value.value}";
		chart4.innerRadius = am4core.percent(30);

		// Create custom legend
		chart4.events.on("ready", function(event) {
		  // populate our custom legend when chart renders
		  chart4.customLegend = document.getElementById('legend1');
		  pieSeries4.dataItems.each(function(row, i) {
			var color = chart4.colors.getIndex(i);
			var percent = Math.round(row.values.value.percent * 100) / 100;
			var value = row.value;
			legend4.innerHTML += '<div class="legend4-item" id="legend4-item-' + i + '" onclick="toggleSlice(' + i + ');" onmouseover="hoverSlice(' + i + ');" onmouseout="blurSlice(' + i + ');" style="color: ' + color + ';"><div class="legend4-marker" style="background: ' + color + '"></div>' + row.category + '<div class="legend4-value">' + hoursToTime(value) + ' </div></div>';
		  });
		});


        chart5.data = [{
            "mode": "Available Hours",
            "Hours": @Model.First().availableHours
        }, {
            "mode": "Non-Available Hours",
            "Hours": @Model.First().nonAvailableHours
        }, {
		"mode": "Total Hours",
		"Hours": @Model.First().totalHours
		}];


		var pieSeries5 = chart5.series.push(new am4charts.PieSeries());
		pieSeries5.dataFields.value = "Hours";
		pieSeries5.dataFields.category = "mode";
		//pieSeries1.labels.template.disabled = true;
		pieSeries5.alignLabels = false;
        pieSeries5.labels.template.bent = true;
        pieSeries5.labels.template.radius = 3;
        pieSeries5.labels.template.padding(0, 0, 0, 0);
		//pieSeries5.ticks.template.disabled = true;
		pieSeries5.labels.template.text = "{category}: {value.value}";
        pieSeries5.slices.template.tooltipText = "{category}: {value.value}";
		chart5.innerRadius = am4core.percent(30);

		// Create custom legend
		chart5.events.on("ready", function(event) {
		  // populate our custom legend when chart renders
		  chart5.customLegend = document.getElementById('legend1');
		  pieSeries5.dataItems.each(function(row, i) {
			var color = chart5.colors.getIndex(i);
			var percent = Math.round(row.values.value.percent * 100) / 100;
			var value = row.value;
			legend5.innerHTML += '<div class="legend5-item" id="legend5-item-' + i + '" onclick="toggleSlice(' + i + ');" onmouseover="hoverSlice(' + i + ');" onmouseout="blurSlice(' + i + ');" style="color: ' + color + ';"><div class="legend5-marker" style="background: ' + color + '"></div>' + row.category + ':  ' + hoursToTime(value) + ' </div>';
		  });
		});


        var pieSeries6 = chart6.series.push(new am4charts.PieSeries());
        pieSeries6.dataFields.value = "Hours";
        pieSeries6.dataFields.category = "mode";

        // Let's cut a hole in our Pie chart the size of 30% the radius
        chart6.innerRadius = am4core.percent(30);


        // Put a thick white border around each Slice
        pieSeries6.slices.template.stroke = am4core.color("#fff");
        pieSeries6.slices.template.strokeWidth = 2;
        pieSeries6.slices.template.strokeOpacity = 1;
        pieSeries6.slices.template
            // change the cursor on hover to make it apparent the object can be interacted with
            .cursorOverStyle = [
                {
                    "property": "cursor",
                    "value": "pointer"
                }
            ];

        pieSeries6.alignLabels = false;
        pieSeries6.labels.template.bent = true;
        pieSeries6.labels.template.radius = 3;
        pieSeries6.labels.template.padding(0, 0, 0, 0);

        pieSeries6.ticks.template.disabled = true;

        pieSeries6.labels.template.text = "{category} {value.value}";
        pieSeries6.slices.template.tooltipText = "{category} {value.value}";

        // Create a base filter effect (as if it's not there) for the hover to return to
        var shadow6 = pieSeries6.slices.template.filters.push(new am4core.DropShadowFilter);
        shadow6.opacity = 0;

        // Create hover state
        var hoverState6 = pieSeries6.slices.template.states.getKey("hover"); // normally we have to create the hover state, in this case it already exists

        // Slightly shift the shadow and make it more prominent on hover
        var hoverShadow6 = hoverState6.filters.push(new am4core.DropShadowFilter);
        hoverShadow6.opacity = 0.7;
        hoverShadow6.blur = 5;

        // Add a legend
        chart6.legend = new am4charts.Legend();

        chart6.legend.valueLabels.template.text = "{value.value}";

        chart6.data = [{
            "mode": "Average @Model.First().parameterName of Working Hours: ",
            "Hours": @Model.First().avgOfAvailableHours
        }, {
            "mode": "Average @Model.First().parameterName of Non-Working Hours: ",
            "Hours": @Model.First().avgOfNonAvailableHours
        }];


        var pieSeries7 = chart7.series.push(new am4charts.PieSeries());
        pieSeries7.dataFields.value = "Hours";
        pieSeries7.dataFields.category = "mode";

        // Let's cut a hole in our Pie chart the size of 30% the radius
        chart7.innerRadius = am4core.percent(30);


        // Put a thick white border around each Slice
        pieSeries7.slices.template.stroke = am4core.color("#fff");
        pieSeries7.slices.template.strokeWidth = 2;
        pieSeries7.slices.template.strokeOpacity = 1;
        pieSeries7.slices.template
            // change the cursor on hover to make it apparent the object can be interacted with
            .cursorOverStyle = [
                {
                    "property": "cursor",
                    "value": "pointer"
                }
            ];

        pieSeries7.alignLabels = false;
        pieSeries7.labels.template.bent = true;
        pieSeries7.labels.template.radius = 3;
        pieSeries7.labels.template.padding(0, 0, 0, 0);

        pieSeries7.ticks.template.disabled = true;

        pieSeries7.labels.template.text = "{category} {value.value}";
        pieSeries7.slices.template.tooltipText = "{category} {value.value}";

        // Create a base filter effect (as if it's not there) for the hover to return to
        var shadow7 = pieSeries7.slices.template.filters.push(new am4core.DropShadowFilter);
        shadow7.opacity = 0;

        // Create hover state
        var hoverState7 = pieSeries7.slices.template.states.getKey("hover"); // normally we have to create the hover state, in this case it already exists

        // Slightly shift the shadow and make it more prominent on hover
        var hoverShadow7 = hoverState7.filters.push(new am4core.DropShadowFilter);
        hoverShadow7.opacity = 0.7;
        hoverShadow7.blur = 5;

        // Add a legend
        chart7.legend = new am4charts.Legend();

        chart7.legend.valueLabels.template.text = "{value.value}";

        chart7.data = [{
            "mode": "Minimun @Model.First().parameterName: ",
            "Hours": @Model.First().minValue
        }, {
            "mode": "Maximum @Model.First().parameterName: ",
            "Hours": @Model.First().maxValue
        }, {
            "mode": "Average @Model.First().parameterName: ",
            "Hours": @Model.First().avgVale
        }];


        var pieSeries8 = chart8.series.push(new am4charts.PieSeries());
        pieSeries8.dataFields.value = "Hours";
        pieSeries8.dataFields.category = "mode";

        // Let's cut a hole in our Pie chart the size of 30% the radius
        chart8.innerRadius = am4core.percent(30);


        // Put a thick white border around each Slice
        pieSeries8.slices.template.stroke = am4core.color("#fff");
        pieSeries8.slices.template.strokeWidth = 2;
        pieSeries8.slices.template.strokeOpacity = 1;
        pieSeries8.slices.template
            // change the cursor on hover to make it apparent the object can be interacted with
            .cursorOverStyle = [
                {
                    "property": "cursor",
                    "value": "pointer"
                }
            ];

        pieSeries8.alignLabels = false;
        pieSeries8.labels.template.bent = true;
        pieSeries8.labels.template.radius = 3;
        pieSeries8.labels.template.padding(0, 0, 0, 0);

        pieSeries8.ticks.template.disabled = true;

        pieSeries8.labels.template.text = "{category} {value.value}";
        pieSeries8.slices.template.tooltipText = "{category} {value.value}";

        // Create a base filter effect (as if it's not there) for the hover to return to
        var shadow8 = pieSeries8.slices.template.filters.push(new am4core.DropShadowFilter);
        shadow8.opacity = 0;

        // Create hover state
        var hoverState8 = pieSeries8.slices.template.states.getKey("hover"); // normally we have to create the hover state, in this case it already exists

        // Slightly shift the shadow and make it more prominent on hover
        var hoverShadow8 = hoverState8.filters.push(new am4core.DropShadowFilter);
        hoverShadow8.opacity = 0.7;
        hoverShadow8.blur = 5;

        // Add a legend
        chart8.legend = new am4charts.Legend();

        chart8.legend.valueLabels.template.text = "{value.value}";

        chart8.data = [{
            "mode": "Average @Model.First().parameterName of Working Hours: ",
            "Hours": @Math.Round((Model.First().avgOfAvailableHours * 0.3), 2)
        }, {
            "mode": "Average @Model.First().parameterName of Non-Working Hours: ",
            "Hours": @Math.Round((Model.First().avgOfNonAvailableHours * 0.3), 2)
        }];


        var pieSeries9 = chart9.series.push(new am4charts.PieSeries());
        pieSeries9.dataFields.value = "Hours";
        pieSeries9.dataFields.category = "mode";

        // Let's cut a hole in our Pie chart the size of 30% the radius
        chart9.innerRadius = am4core.percent(30);


        // Put a thick white border around each Slice
        pieSeries9.slices.template.stroke = am4core.color("#fff");
        pieSeries9.slices.template.strokeWidth = 2;
        pieSeries9.slices.template.strokeOpacity = 1;
        pieSeries9.slices.template
            // change the cursor on hover to make it apparent the object can be interacted with
            .cursorOverStyle = [
                {
                    "property": "cursor",
                    "value": "pointer"
                }
            ];

        pieSeries9.alignLabels = false;
        pieSeries9.labels.template.bent = true;
        pieSeries9.labels.template.radius = 3;
        pieSeries9.labels.template.padding(0, 0, 0, 0);

        pieSeries9.ticks.template.disabled = true;

        pieSeries9.labels.template.text = "{category} {value.value}";
        pieSeries9.slices.template.tooltipText = "{category} {value.value}";

        // Create a base filter effect (as if it's not there) for the hover to return to
        var shadow9 = pieSeries9.slices.template.filters.push(new am4core.DropShadowFilter);
        shadow9.opacity = 0;

        // Create hover state
        var hoverState9 = pieSeries9.slices.template.states.getKey("hover"); // normally we have to create the hover state, in this case it already exists

        // Slightly shift the shadow and make it more prominent on hover
        var hoverShadow9 = hoverState9.filters.push(new am4core.DropShadowFilter);
        hoverShadow9.opacity = 0.7;
        hoverShadow9.blur = 5;

        // Add a legend
        chart9.legend = new am4charts.Legend();

        chart9.legend.valueLabels.template.text = "{value.value}";

        chart9.data = [{
            "mode": "Average @Model.First().parameterName of Working Hours: ",
            "Hours": @Math.Round((Model.First().avgOfAvailableHours / 0.3), 2)
        }, {
            "mode": "Average @Model.First().parameterName of Non-Working Hours: ",
            "Hours": @Math.Round((Model.First().avgOfNonAvailableHours / 0.3), 2)
        }];

        //am4core.useTheme(am4themes_animated);
        var jsonObj = @Html.Raw(ViewData["amChartData"]);
        var chart = am4core.create("chartContainer2", am4charts.XYChart);
        chart.paddingLeft = 30;
        let title = chart.titles.create();
        title.text = jsonObj.parameterName + " Data fetched between " + jsonObj.fromDate + " to " + jsonObj.toDate +" ";
        title.fontSize = 25;
        title.marginBottom = 10;
        var dateAxis = chart.xAxes.push(new am4charts.DateAxis());
        dateAxis.baseInterval = {
            "timeUnit": "minute",
            "count": 1
        };
        dateAxis.dateFormats.setKey('hour', 'hh:mm a');
        dateAxis.tooltipDateFormat = " d-MM-yyyy hh:mm:ss a";
        var valueAxis = chart.yAxes.push(new am4charts.ValueAxis());
        valueAxis.tooltip.disabled = true;
        valueAxis.renderer.labels.template.disabled = true;
        //valueAxis.min = -0.2;
        //valueAxis.max = 1.2;

        if (jsonObj.SpellDataArray.length === 0) { }
        else {
            var series1 = chart.series.push(new am4charts.LineSeries());
            var data1 = [];
            //console.log(jsonObj[j].locationName);
            for (var i = 0; i < jsonObj.SpellTimeArray.length; i++) {
                var Thedate = jsonObj.SpellTimeArray[i];
                var changeDate = moment(Thedate, 'DD/MM/YYYY HH:mm:ss A').format("MM/DD/YYYY HH:mm:ss");
                var dateObj = new Date((changeDate));
                var valuep1 = jsonObj.SpellDataArray[i];

                var location = jsonObj.locationName;
                if (jsonObj.parameterName === "Pump No. 1") {
                    if (jsonObj.SpellDataArray[i] == 0) {
                        data1.push({ location1: location, paramameter: 'Pump No. 1 Status', date1: dateObj, value1: valuep1, status1: 'OFF' });
                    }
                    else {
                        data1.push({ location1: location, paramameter: 'Pump No. 1 Status', date1: dateObj, value1: valuep1, status1: 'ON' });
                    }
                }
                else if (jsonObj.parameterName === "Pump No. 2") {
                    if (jsonObj.SpellDataArray[i] == 0) {
                        data1.push({ location1: location, paramameter: 'Pump No. 2 Status', date1: dateObj, value1: valuep1, status1: 'OFF' });
                    }
                    else {
                        data1.push({ location1: location, paramameter: 'Pump No. 2 Status', date1: dateObj, value1: valuep1, status1: 'ON' });
                    }
                }
                else if (jsonObj.parameterName === "Chlorine Level") {
                    if (jsonObj.SpellDataArray[i] == 0) {
                        data1.push({ location1: location, paramameter: 'Chlorine Level', date1: dateObj, value1: valuep1, status1: 'LOW' });
                    }
                    else {
                        data1.push({ location1: location, paramameter: 'Chlorine Level', date1: dateObj, value1: valuep1, status1: 'HIGH' });
                    }
                }
                else if (jsonObj.parameterName === "Manual Mode") {
                    if (jsonObj.SpellDataArray[i] == 0) {
                        data1.push({ location1: location, paramameter: 'Mode', date1: dateObj, value1: valuep1, status1: 'Auto' });
                    }
                    else {
                        data1.push({ location1: location, paramameter: 'Chlorine Level', date1: dateObj, value1: valuep1, status1: 'Manual' });
                    }
                }
                else {
                    data1.push({ location1: location, paramameter: jsonObj.parameterName, date1: dateObj, value1: valuep1, status1: valuep1 });
                }

            }
            series1.data = data1;
            series1.dataFields.dateX = "date1";
            series1.dataFields.valueY = "value1";
            series1.dataFields.status1 = "status1";
            series1.dataFields.location = "location1";
            if (jsonObj.parameterName === "Pump No. 1") {
                series1.tooltipText = " Pump No. 1 Status: [bold]{status1}[/] ";
            }
            else if (jsonObj.parameterName === "Pump No. 2") {
                series1.tooltipText = " Pump No. 2 Status: [bold]{status1}[/] ";
            }
            else if (jsonObj.parameterName === "Chlorine Level") {
                series1.tooltipText = " Chlorine Level: [bold]{status1}[/] ";
            }
            else if (jsonObj.parameterName === "Manual Mode") {
                series1.tooltipText = " Mode : [bold]{status1}[/] ";
            }
            else {
                series1.tooltipText = " " + jsonObj.parameterName +" : [bold]{status1}[/] ";
            }
            series1.name = jsonObj.parameterName;
            series1.fillOpacity = 0.3;

        }
        chart.cursor = new am4charts.XYCursor();
        chart.cursor.lineY.opacity = 0;

        chart.legend = new am4charts.Legend();


    }); // end am4core.ready()
</script>

<div class="portlet-title">
    <div class="row" style="opacity:0.9">
        <div class="portlet-body">
            <div class="widget stacked">
                <div class="widget-content">
                    <div>
                        <center>
                            <div id="chartContainer2" style="width: 95%; height: 500px"></div>
                        </center>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>

<div class="portlet-title">
    <div class="row" style="opacity:0.9">
        <div class="portlet-body">
            <div class="widget stacked">
                <div class="widget-content">
                    <div>
                        <center>
                            @if (Model.First().parameterName == "Pump No. 1" ||
                                Model.First().parameterName == "Pump No. 2")
                            {


                                <div class="col-md-4 col-sm-12 col-lg-4 chartdiv">

                                    <div id="chartdiv1" style="display:block !important; height:300px !important; width: auto"></div>
                                    <div id="legend1" style="display:block !important; height:100px !important"></div>
                                </div>

                                <div class="col-md-4 col-sm-12 col-lg-4 chartdiv">

                                    <div id="chartdiv2" style="display:block !important; height:300px !important; width: auto"></div>
                                    <div id="legend2" style="display:block !important; height:100px !important"></div>
                                </div>

                                <div class="col-md-4 col-sm-12 col-lg-4 chartdiv">

                                    <div id="chartdiv3" style="display:block !important; height:300px !important; width: auto"></div>
                                    <div id="legend3" style="display:block !important; height:100px !important"></div>
                                </div>

                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" style="display:none">

                                    <div id="chartdiv4" style="display:block !important; height:300px !important; width: auto"></div>
                                    <div id="legend4" style="display:block !important; height:100px !important"></div>
                                </div>


                                <div class="col-md-6 col-sm-12 col-lg-6 chartdiv" id="chartdiv5" style="display:none !important"></div>
                                <div class="col-md-6 col-sm-12 col-lg-6 chartdiv" id="chartdiv6" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv7" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv8" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv9" style="display:none !important"></div>

                            }
                            else if (Model.First().parameterName == "Voltage" ||
                                Model.First().parameterName == "Current" ||
                                Model.First().parameterName == "Power Factor" ||
                                Model.First().parameterName == "Power (KVA)" ||
                                Model.First().parameterName == "Power (KVAR)" ||
                                Model.First().parameterName == "Power (KW)" ||
                                Model.First().parameterName == "Water Flow" ||
                                Model.First().parameterName == "Chlorine Level")
                            {
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv1" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv2" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv3" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv4" style="display:none !important"></div>
                                <div class="col-md-6 col-sm-12 col-lg-6 chartdiv">
                                    <div id="chartdiv5" style="display:block !important; height:400px !important; width: auto"></div>
                                    <div id="legend5" style="display:block !important; height:100px !important; float: none !important"></div>
                                </div>
                                <div class="col-md-6 col-sm-12 col-lg-6 chartdiv" id="chartdiv6"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv7" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv8" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv9" style="display:none !important"></div>
                            }
                            else if (Model.First().parameterName == "Manual Mode")
                            {
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv1" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv2" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv3" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv4" style="display:none !important"></div>
                                <div class="col-md-12 col-sm-12 col-lg-12 chartdiv">
                                    <div id="chartdiv5" style="display:block !important; height:400px !important; width: auto"></div>
                                    <div id="legend5" style="display: block !important; height: 100px !important; float: none; margin-left: -120px;"></div>
                                </div>
                                <div class="col-md-6 col-sm-12 col-lg-6 chartdiv" id="chartdiv6" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv7" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv8" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv9" style="display:none !important"></div>
                            }
                            else if (Model.First().parameterName == "Frequency" || Model.First().parameterName == "Tank No. 1" || Model.First().parameterName == "Tank No. 2" || Model.First().parameterName == "TDS")
                            {
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv1" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv2" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv3" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv4" style="display:none !important"></div>
                                <div class="col-md-6 col-sm-12 col-lg-6 chartdiv" id="chartdiv5" style="display:none !important"></div>
                                <div class="col-md-6 col-sm-12 col-lg-6 chartdiv" id="chartdiv6" style="display:none !important"></div>
                                <div class="col-md-12 col-sm-12 col-lg-12 chartdiv" id="chartdiv7"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv8" style="display:none !important"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv9" style="display:none !important"></div>

                            }
                            else
                            {
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv1"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv2"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv3"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv4"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv5"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv6"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv7"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv8"></div>
                                <div class="col-md-3 col-sm-12 col-lg-3 chartdiv" id="chartdiv9"></div>
                            }
                        </center>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>


@section scripts {
    <section class="scripts">

        <script type="text/javascript">
            window.onload = function ()
            {
                
                am4core.ready(function () {
                    
                });
            }
        </script>
    </section>
}